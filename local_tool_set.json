['\n@update_traverse_dict\ndef works_list(applies_to_part: list[str]=None, created_by: list[str]=None, issue_priority: list[str]=None, issue_rev_orgs: list[str]=None, limit: int=None, owned_by: list[str]=None, stage_name: list[str]=None, ticket_needs_response: bool = None, ticket_rev_org: list[str] = None, ticket_severity: list[str]=None, ticket_source_channel: list[str]=None, work_type: list[str]=None) -> list:\n    """Returns a list of work items matching the request.\n\n    Args:\n        applies_to_part (list[str]): Filters for work belonging to any of the provided parts.\n        created_by (list[str]): Filters for work created by any of these users.\n        issue_priority (list[str]): Filters for issues with any of the provided priorities.\n        issue_rev_orgs (list[str]): Filters for issues with any of the provided Rev organizations.\n        limit (int): The maximum number of works to return.\n        owned_by (list[str]): Filters for work owned by any of these users.\n        stage_name (list[str]): Filters for records in the provided stage(s) by name.\n        ticket_needs_response (bool): Filters for tickets that need a response.\n        ticket_rev_org (list[str]): Filters for tickets associated with any of the provided Rev organizations.\n        ticket_severity (list[str]): Filters for tickets with any of the provided severities.\n        ticket_source_channel (list[str]): Filters for tickets with any of the provided source channels.\n        work_type (list[str]): Filters for work of the provided types.\n    """\n    return ["VERY-RELATED", "VERY-VERY-RELATED", "VERY-VERY-VERY-RELATED"]\n', '\n@update_traverse_dict\ndef summarize_objects(objects: list) -> None:\n    """Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.\n\n    Args:\n        objects (list[object]): List of objects to summarize.\n    """\n    return ",".join(objects) \n', '\n@update_traverse_dict\ndef prioritize_objects(objects: list) -> list:\n    """Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.\n\n    Args:\n        objects (list[object]): A list of objects to be prioritized.\n    """\n    return sorted(objects)\n', '\n@update_traverse_dict\ndef add_work_items_to_sprint(work_ids: list[str], sprint_id: str) -> None:\n    """Adds the given work\n    items to the sprint\n    \n    Args:\n           work_ids (list[str]): A list of work item IDs to be added to the sprint.\n           sprint_id (str): The ID of the sprint to which the work items should be added\n    """\n    \n    return None\n', '\n@update_traverse_dict\ndef get_sprint_id() -> str:\n    """Returns the ID of the current sprint."""\n    return "GOD-SPRINT"\n', '\n@update_traverse_dict\ndef get_similar_work_items(work_id: str) -> list:\n    """Returns a list of work items that are similar to the given work item.\n\n    Args:\n        work_id (str): The ID of the work item for which you want to find similar items.\n    """\n    return [ "RELATED-STR1", "RELATED-STR2"]\n', '\n@update_traverse_dict\ndef search_object_by_name(query: str) -> str:\n    """Given a search string, returns the id of a matching object in the system of record. \n    If multiple matches are found, it returns the one where the confidence is highest.\n\n    Args:\n        query (str): The search string, could be for example customers name, part name, user name.\n    """\n    return "GOD-STRING"\n', '\n@update_traverse_dict\ndef create_actionable_tasks_from_text(text: str) -> None:\n    """Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.\n\n    Args:\n        text (str): The text from which the actionable insights need to be created.\n    """\n    return None\n', '\n@update_traverse_dict\ndef who_am_i() -> str:\n    """Returns the ID of the current user."""\n    return "GOD-I-AM"\n']
